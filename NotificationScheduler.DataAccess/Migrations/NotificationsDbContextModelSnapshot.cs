// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotificationScheduler.DataAccess;

#nullable disable

namespace NotificationScheduler.DataAccess.Migrations
{
    [DbContext(typeof(NotificationsDbContext))]
    partial class NotificationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("CompanyMarket", b =>
                {
                    b.Property<Guid>("CompaniesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarketsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CompaniesId", "MarketsId");

                    b.HasIndex("MarketsId");

                    b.ToTable("CompanyMarket");
                });

            modelBuilder.Entity("CompanyNotification", b =>
                {
                    b.Property<Guid>("CompaniesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NotificationsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CompaniesId", "NotificationsId");

                    b.HasIndex("NotificationsId");

                    b.ToTable("CompanyNotification");
                });

            modelBuilder.Entity("NotificationScheduler.DataAccess.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("NotificationScheduler.DataAccess.Models.Market", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Location")
                        .IsUnique();

                    b.ToTable("Markets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74bdbf46-1c5d-47ab-9da0-b60ab8f07605"),
                            Location = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("9cd11347-465b-4eb5-a4d5-a9d6b9afc425"),
                            Location = "Finland"
                        },
                        new
                        {
                            Id = new Guid("128d9dfa-860c-43b3-a1b6-4b41c0e9e668"),
                            Location = "Norway"
                        },
                        new
                        {
                            Id = new Guid("bd418e29-19cf-4cbb-a7d8-51d4285ed850"),
                            Location = "Sweden"
                        });
                });

            modelBuilder.Entity("NotificationScheduler.DataAccess.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SendingDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SendingDate")
                        .IsUnique();

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CompanyMarket", b =>
                {
                    b.HasOne("NotificationScheduler.DataAccess.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotificationScheduler.DataAccess.Models.Market", null)
                        .WithMany()
                        .HasForeignKey("MarketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyNotification", b =>
                {
                    b.HasOne("NotificationScheduler.DataAccess.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotificationScheduler.DataAccess.Models.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
